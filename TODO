[x] iterate only over unique permutations
  !! must be huge optimization 

[x] iterate rotations starting from the beginning of the sequence
  !! preparation for the next step
  
[x] if some shape in permutation cannot be placed in any way - skip the whole bunch of permutations starting with particular "prefix"
  if let's say in {1 2 3 4} shape #2 cannot be placed then i don't need all of the permutations starting with {1, 2}
  !! must be huge optimization

[x] measure time
[x] when switch to next permutation better to save rotations of prefix'es shapes adn also do not remove shapes from the grid
[-] look for next free block in the direction of smallest dimension of the grid
[-] look for next free block in the smallest "island" of empty blocks
[-] try to find other solutions/not-solutions immediately based on some found one
    implies the need to implement a hash table or smth

[-] parallel calculations (last optimization to do because i want the main algorithm to be the best it can possibly be)

[-] add reflections besides rotations

[-] make visualisation embedding this project into C++ program
